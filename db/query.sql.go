// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, password, approved
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Approved,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, approved FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Approved,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (
  username, password, approved
) VALUES (
  $1, $2, $3
)
ON CONFLICT DO NOTHING
`

type UpsertUserParams struct {
	Username string
	Password string
	Approved bool
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.Exec(ctx, upsertUser, arg.Username, arg.Password, arg.Approved)
	return err
}
